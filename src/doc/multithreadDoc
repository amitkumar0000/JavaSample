MultiThread
============


MultiThread allow two or more thread to run concurrently for maximum cpu utilization.

Thread can be executed via
        1. extending Thread class
        2. Implementing Runnable interface

By extending thread class, we can't extend other class, as multiple inheritance is not supported.

Thread Lifecycle
    New : Thread is created
    Runnable : Thread is running
    Blocked : Thread is blocked for some IO operation
    Waiting : Thread is waiting for CPU
    Timed waiting : Thread is timeout waiting. like Thread.sleep(1000)
    Terminated : Thread died


    Thread State : NEW , RUNNABLE, WAITING, BLOCKED, TIMED_WAITING, TERMINATED


Main Thread
    JVM Create main Thread and from JDK 1.5 verify main() method is present.
    deadlock via main thread
        Thread.currentThread.join() //main thread is waiting for main thread to terminate.

Java Concurrency
    yield(), sleep(), join()

    yield() :- Whenever a thread execute yield , it is hint to scheduler that it is ready to pause its execution,
               Scheduler can check if any thread with same or higher priorities requires CPU time, if yes
               give CPU to that thread, current thread move to Ready/Runnable state. It is upto scheduler to assign CPU again.
               Scheduler can ignore this hint also.

    sleep() :- Thread move in timed waiting state

    join() :-  Join on a thread instance(TH1) cause current running thread to stop until thread instance(TH1) complete its execution.

Difference between starting a Thread using start() and run() function
    start()
        Argument are evaluated
        create a new stack frame and pushed into call stack
        parameter are initialize
        method are executed
        value is returned and stack frame is popped from call stack.

     run()
        this is just call the runnable method on current invoking thread.
        like if run is called from main thread. Thread will be running on context on main thread

    The purpose of start() to create separate stack frame and run() is called by JVM

Thread Priority
    Thread priority range 1-10
    MIN_PRIORITY 1
    NORM_PRIORITY 5
    MAX_PRIORITY 10

Object level lock vs Class level lock in Java
    Object level lock :- Two or more thread within a object try to access shared resource
            e.g synchronized doSomething(){}

    Class level lock :- Two or more Object try to access shared resource.
            e.g static synchronized doSomething(){}

ThreadPool
    ThreadPool is a pool of thread,
        Number of thread to create depends upon:
            num of CPU available
            IO/CPU bound  operation.
                More IO bound operation, more thread can be created

    Ways to create threadPool.
    1. Crete threadPool object
    Executors executor = Executors.newCachedThreadPool()    // create thread on demand, reuse the existing  thread
    Executors executor = Executors.newFixedThreadPool(n)  // n number of thread
    Executors executor = Executors.newSingleThreadExecutor()  // create single number of thread

    2.Create runnable task
    3. passing runnable object to executor


    Risks in using threadPool
        1. Thread leakage : thread exist from threadPool resulting in reduction in number of thread
        2. Deadlock
        3. Resource Thrashing: if number of thread is more, and thread is more busy in context switching.

Semaphores
===========
Semaphores(int num)
    It allow num of Thread to access shared resource
Semaphores(int num , boolean how)
    It allow num of thread to access shared resource. if how is true than in order semaphores is requested.

 semaphore.acquire()  //it acquire it decrease the count by 1. if count < 0 then thread enter in wait state
 semaphore.release()  // it release the semaphore and increase the count by 1.






