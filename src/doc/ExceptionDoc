
Exception and Error is child class of Throwable.

           Object
                1. Throwable
                    1.1 Exception
                        1.1.1 Checked Exception
                            e.g IO or Compile Time Exception
                        1.2.2 UnChecked Exception
                            e.g Runtime or NullPointer Exception
                    1.2 Error
                        1.2.1 Virtual Machine Error (stack Overflow)
                        1.2.2 Assertion Error etc

Default Exception Handling
--------------------------
Whenever inside a method, an exception occur,
method create an exception object and handover to java run time machine(JVM).
Java run time system trace the Call Stack(ordered list of method from where this method is get called)
and find the method which handle the exception raised.
If no method is match with exact exception type,
then exception object is handover to default exception handler which is part of run time system
and program terminate abnormally.

Five Keywords:
--------------
try
catch
throw
throws
finally

finally
==========
finally block is always executed after try block even return get called in try and catch block.
There is only way not to call finally block, by stopping thread or calling System.exit()
Besides a System.exit(), the finally block will not run if the JVM crashes for some reason (e.g. infinite loop in your try block)

As far as the thread itself, only if it is stopped using the stop() method (or suspend() without resume())
will the finally block not be executed. A call to interrupt() will still result in the finally block being executed.

Types of Exception
-------------------
    1. Built-in Exception
    2. User-defined Exception

Derived Class Base Class Catch Exception
    catching a base class exception before derived is not allowed .

Checked And Unchecked Exception
--------------------------------
Checked Exception which got checked at compile time.
Unchecked Exception which does not get checked at compile time

UnChecked Exception :
        Error:
        Runtime Exception:
                    Arithmetic Exception

Rationale behind checked and unchecked exception :- if can recover from failure ,checked exception else unchecked.

Throw and Throws
================
throw keyword is used to throw any checked exception.
It is mostly used for custom exception.

throws keyword is used as part of method signature to notify caller party to handle exception.
either caller party can add throws or try catch the exception

Java OutOfMemoryError Exception
==================================
    Error 1: Java Heap Space
            If application make excessive use of finalize method.
            Finalize method does not let garbage collector reclaim the object space at that time
            rather put in finalization Queue.
            Finalization queue is executed by daemon thread.
            If this thread does keep pace with finalization queue, will eventually lead to heap full.

            Another reason, allocated heap size can be not suffice for application, Heap size can be tune
            to use more space.
            Prevention : Check how to monitor objects for which finalization is pending in Monitor the Objects Pending Finalization.

    Error 2: GC Overhead time
            This error indicate, GC is running almost all the time, and application is making small progress.
            IF GC run 98% of time and reclaim 2% of heap size, and this happen consecutively 5 times.
            OutOfMemoryError exception is thrown

            Prevention : Increase the heap size and turn off it with the command line flag -XX:-UseGCOverheadLimit.

    Error 3: PermGen Space is grown
            This error indicate PermGen region of memory is exhausted. PermGen is used to store all information related to a class.

            Prevention : When the OutOfMemoryError due to PermGen exhaustion is caused during the application launch,
            the solution is simple. The application just needs more room to load all the classes to the PermGen area
             so we just need to increase its size. To do so, alter your application launch configuration
             and add (or increase if present) the -XX:MaxPermSize parameter similar to the following example:

            java -XX:MaxPermSize=512m com.saket.demo.Permgen

    Error 4: MetaSpace
            Java Class metadata is stored in native memory(outside heap).
            IF metaSpace is exhausted this error is thrown.

        Prevention : Increase the metaspace size using -XX:MaxMetaspaceSize

    Error 5: Requested array size exceeds VM limit area.
            The amount of space required by array exceeds the heap size.

    Error 6: Request size bytes for reason. Out of swap space.
            When native heap is close to exhaustion.
            Logs(fatal logs generated by VM) can be useful to analyze which process in the system eating up all memory

    Error 7: reason stack_trace_with_native_method
            Native method failed to allocate. So no failure in JVM but in JNI or native method



