RxJava : Reactive Extension Java

Building block of RxJava
===========================
1. Observable :
        It is source of data
        It start providing data once subscriber start observing Observables.

2. Subscribers/Observers :
        listening to Observable
        If new item is emitted, onNext method is called on each subscriber
        if observable finish data flow successfully, onComplete is called on each subscriber.
        if observable finish data flow with error, onError is called on each subscriber.

set of method for modifying and composing the data.

An Observable emits data and subscriber consume data.

Different Types of Observable
================================
1. Observable
            Emit 0 and n items and terminate with success or error
2. Flowable
            Emit 0 or n items with success or error. support backpressure, which allow to control how fast source emits
            Backpressure strategy:-
                        MISSING,
                        ERROR,
                        BUFFER,
                        DROP,
                        LATEST
3. Single
            Emit either a single item or error event. e.g method call
4. Maybe
            succedds wtih an item or zero item.
5. Completable
            Either complete with success or error. never emit any item


Different ways to create Observable Object
-------------------------------------------

1. Observable.create(new ObservableOnSubscribe(){})
2. Observable.just();
3. Observable.fromCallable(new Callable{})
4. Observable.fromIterable()
5. Observable.fromArray()
6. Observable.fromFuture()
7. Observable.interval()

each observable type can be converted into different observable type

Similar methods exists for the other data types, e.g., *Flowable.just(), Maybe.just() and Single.just.

Hot and Cold Observable; connectAble Observable
================================================

Hot Observable : will emits data as available, don't wait for subscriber.
                They don't emit sequence of data again for new subscriber.


Cold Observable : will emits data if subscribe
                  if more than one subscriber than emits data one by one to all subscriber.


RxSubjects :
============
 It acts as both observables and subscriber as well.
             RxSubject are Hot Observables.

Ways to create Hot Observables
      1. Subjects :- Using Subject , we can not only convert cold observable into hot observable. but
                     can also create hot observable from scratch.
      2. ConnectAbleObservable : we can only convert cold observable into hot observable using publish and connect method.
                              and various variant like refCount, autoConnect and replay etc.

Four Variants of Subjects
==========================
1. AsyncSubjects :
                Only emits last value to its subscriber when source observable completes.
2. BehaviourSubjects :
                Only emits most recently one, if none emitting then default one and then continue the sequence until complete.
3. PublishSubjects:
                Same as BehaviourSubject expect it emit only those item which are emitted after subscription. And no default value.
4. ReplaySubjects:
                It emits all the emitted item to the subscriber regardless of when subscriber subscribes and then continue the
                sequence.

ConnectableObservable
======================
    we use following method to convert Cold Observable to Hot Observable

    1. Publish :- It does not start emit when subscribe but when connect operator is applied.
    2. Connect :- It instruct connectable observable to begin emitting item to subscriber.
    3. Replay  :- It ensure all subscriber see the same sequence of emitted data
    4. autoconnect(num) :- It wait for num of subscriber to subscribe
    5. refCount :- it make hot observable cold until one subscriber subscribe. then hot observable.

Disadvantages of Hot Observable
1. Sources of data become unpredictable to subscriber.
        As Subject is also able to emit data. Source of data source become unpredictable.
2. Subscribers can have subscription effect based on subscription time.

Rxjava Scheduler
===============
    Scheduler can be thought of as a thread pool managing 1 or more thread

    1.Schedulers.io() is backed by an unbounded thread pool
    2.Schedulers.computation() bounded by number of processor
    3. Schedulers.newThread() creates a new thread for each unit of work scheduled.
    4. Schedulers.from(Executor executor) creates and returns a custom scheduler backed by the specified executor
    5. Main thread or AndroidSchedulers.mainThread() is provided by the RxAndroid extension library to RxJava
    6. Schedulers.single() is new in RxJava 2. This scheduler is backed by a single thread executing tasks sequentially in the order requested
    7. Schedulers.trampoline() executes tasks in a FIFO (First In, First Out) manner by one of the participating worker threads.
                        Itâ€™s often used when implementing recursion to avoid growing the call stack.
                        
RxJava Operator
----------------
1. Map : Map transforms the items emitted by an Observable by applying a function to each item
                e.g map(x -> x*10)
2. FlatMap : It also applies function on emitted item but it return observable of resultant item.
                
2. ConcatMap : It is same as FlatMap but order of emitted item is preserved in this 






